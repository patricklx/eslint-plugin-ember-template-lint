# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:

    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        os: [ ubuntu ]
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - run: npm install

    - run: npm run lint:js

    - run: npm run test -- --runInBand

  deploy:
    needs: [ test ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.x ]
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: npm install, build,
        run: |
          mkdir ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          npm install --no-audit --legacy-peer-deps
          version=$(cat package.json | jq -r '.version')
          git fetch --unshallow
          git fetch --all --tags
          TAG=v$version
        env:
          CI: true
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      - name: deploy npm
        if: github.ref == 'refs/heads/main'
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm publish || echo "already published"
          fi
        env:
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"
      - name: create tag
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_COMMIT: ${{ github.sha }}
        run: |
          set -e
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            npm i -g lerna-changelog
            export GITHUB_AUTH=$GITHUB_TOKEN
            export changelog=$(lerna-changelog --next-version=$version)
            echo -e "# Changelog\n\n$changelog\n$(tail --lines=+2 CHANGELOG.md)" > CHANGELOG.md
            git add CHANGELOG.md
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git commit -m "update changelog"
            git tag $TAG
            git push
            git push --tags
          fi
      - name: Create a Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          url="https://api.github.com/repos/patricklx/eslint-plugin-ember-template-lint/releases"
          exists=$(curl -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url | jq ".[] | select(.tag_name == \"$TAG\") | .id")
          if [[ -z $exists ]]; then
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url -d "{ \"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"$changelog\", \"draft\": false, \"prerelease\": false}"
          else
            echo "release already exists";
          fi;

